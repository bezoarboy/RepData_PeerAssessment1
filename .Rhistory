install.packages("RMySQL")
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "97270badb5d63caf3d7b", secret = "6460085dcefc05563b2f63dcad76f22b48968e87")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
install.packages("jsonlite")
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
results <- content(req)
results$id
results
head(results)
dim(results)
type(results)
results[1]
results$id
results$name
results[1]$id
results$id[1]
results[1][1][1]
results[1][1][1]$id
results2 <- jsonlite::fromJSON(toJSON(results))
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
results2 <- jsonlite::fromJSON(toJSON(results))
head(results2)
View(results2)
results2$name
results2[5]
results2[5]$name
results2$name[5]
results2$name['datasharing']
results2$created_at
results2$created_at[5]
savehistory("~/Desktop/Cleaning Data - Week 2.Rhistory")
results2$name[5]
results2[5]$name
results2$name['datasharing']
results2$created_at
results2$name
oauth_endpoints("github")
myapp <- oauth_app("github", "97270badb5d63caf3d7b", secret = "6460085dcefc05563b2f63dcad76f22b48968e87")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
results <- content(req)
results2 <- jsonlite::fromJSON(toJSON(results))
# results2$name
results2$name[5]
# results2$created_at
results2$created_at[5]
demo()
install.packages(c("boot", "class", "cluster", "codetools", "data.table", "DBI", "Formula", "gsubfn", "Hmisc", "httpuv", "httr", "jsonlite", "KernSmooth", "MASS", "Matrix", "mgcv", "nlme", "quantmod", "Rcpp", "RCurl", "RSQLite", "sqldf", "swirl", "testthat", "xlsx", "xlsxjars", "yaml"))
install.packages('devtools')
getwd()
dir()
cd Desktop
cd(Desktop)
ls()
shinyUI(bootstrapPage(
selectInput(inputId = "n_breaks",
label = "Number of bins in histogram (approximate):",
choices = c(10, 20, 35, 50),
selected = 20),
checkboxInput(inputId = "individual_obs",
label = strong("Show individual observations"),
value = FALSE),
checkboxInput(inputId = "density",
label = strong("Show density estimate"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
# Display this only if the density is shown
conditionalPanel(condition = "input.density == true",
sliderInput(inputId = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
library(datasets)
data(cars)
with(cars, plot(speed, dist))
librar(lattice)
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
?par
library(datasets)
hist(airquality$Ozone)
airquality
with(airquality, plot(Wind, Ozone))
x <- rnorm(100)
hist(x)
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x,y)
quartz()
x11()
?Devices
shiny::runApp('Desktop/shiny')
shiny::runApp('Desktop/shiny')
shiny::runApp('Desktop/shiny/App-4')
shiny::runApp('Desktop/shiny/App-4')
1 != 2
1 == 2
1 <> 2
shiny::runApp('Desktop/shiny/App-4')
shiny::runApp('Desktop/shiny/App-4')
shiny::runApp('Desktop/shiny/App-4')
buildhistory
buildhistory <- c()
buildhistory <- append(buildhistory,"a")
buildhistory <- append(buildhistory,"a")
buildhistory <- append(buildhistory,"a")
buildhistory <- append(buildhistory,"a")
buildhistory <- append(buildhistory,"a")
buildhistory <- append(buildhistory,"a")
paste(buildhistory, collapse = '*', sep = '')
shiny::runApp('Desktop/shiny/App-4')
shiny::runApp('Desktop/shiny/App-4')
shiny::runApp('Desktop/shiny/App-4')
shiny::runApp('Desktop/shiny/App-4')
shiny::runApp('Desktop/shiny/App-4')
buildhistory<-c()
paste(buildhistory, collapse = '*', sep = '')
buildhistory <- append(buildhistory, "another added")
paste(buildhistory, collapse = '*', sep = '')
buildhistory <- append(buildhistory, "another added")
paste(buildhistory, collapse = '*', sep = '')
buildhistory <- append(buildhistory, "another added")
paste(buildhistory, collapse = '*', sep = '')
shiny::runApp('Desktop/shiny/App-4')
shiny::runApp('Desktop/shiny/App-4')
shiny::runApp('Desktop/shiny/App-4')
shiny::runApp('Desktop/shiny/App-4')
?ggplot
library(shiny)
library(xlsx)
library(ggplot2)
library(reshape2)
?ggplot
?ggplot2
?as.integer
?facet_wrap
shiny::runApp('Desktop/fenton2013/growthDashboard2')
shiny::runApp('Desktop/fenton2013/growthDashboard2')
shiny::runApp('Desktop/fenton2013/growthDashboard2')
shiny::runApp('Desktop/fenton2013/growthDashboard2')
shiny::runApp('Desktop/fenton2013/growthDashboard2')
shiny::runApp('Desktop/fenton2013/growthDashboard2')
shiny::runApp('Desktop/fenton2013/growthDashboard2')
shiny::runApp('Desktop/fenton2013/growthDashboard2')
shiny::runApp('Desktop/fenton2013/growthDashboard2')
shiny::runApp('Desktop/fenton2013/growthDashboard2')
shiny::runApp('Desktop/fenton2013/growthDashboard2')
?renderPlot
shiny::runApp('Desktop/fenton2013/growthDashboard2')
shiny::runApp('Desktop/fenton2013/liveGrowthChart5')
shiny::runApp('Desktop/fenton2013/liveGrowthChart5')
?rollapply
library(zoo)
?rollapply
c <- [1:100]
x <- c(1:100)
x <- sample( c(1:10), 100, replace = TRUE)
x
?rollmean
rollmean(x)
rollmean(x, k = 5)
x <- sample( c:0:1), 100, replace = TRUE)
x <- sample( c(0:1), 100, replace = TRUE)
x
rollmean(x, k = 5)
length(rollmean(x, k = 5))
length(rollmean(x, k = 1))
rollmean(x, k = 1)
rollmean(x, k = 1) == x
x <- sample( c(1:10), 100, replace = TRUE)
y <- rollmean(x, k = 5)
z <- c(1:100)
plot(z,x)
plot(z,y)
plot(c(1:96),y)
y <- rollmean(x, k=10)
plot(c(1:length(y)),y)
ploy(z,x)
plot(z,x)
plot(c(1:length(y)),y)
as.integer(TRUE)
as.integer(FALSE
)
x <- sample(c(0,1),100)
x <- sample(c(0,1),100,replace=TRUE)
y <- sample(c(0,1),100,replace=TRUE)
x==y
as.integer(x==y)
rollmean(as.integer(x==y),k=5)
plot(rollmean(as.integer(x==y),k=5))
plot(rollmean(as.integer(x==y),k=10))
plot(rollmean(as.integer(x==y),k=15))
plot(rollmean(as.integer(x==y),k=20))
plot(rollmean(as.integer(x==y),k=5))
plot(rollmean(as.integer(x==y),k=3))
plot(rollmean(as.integer(x==y),k=2))
df <- data.frame(x,y,c(1:100))
df
df <- data.frame( x = x, y = y, z = c(1:100))
str(df)
shiny::runApp('Desktop/R/stafftrack/stafftrack1')
shiny::runApp('Desktop/R/stafftrack/stafftrack1')
shiny::runApp('Desktop/R/stafftrack/stafftrack1')
shiny::runApp('Desktop/R/stafftrack/stafftrack1')
shiny::runApp('Desktop/R/fenton2013/growthDashboard2')
shiny::runApp('Desktop/R/fenton2013/liveGrowthChart5')
shiny::runApp('Desktop/R/fenton2013/liveGrowthChart5')
shiny::runApp('Desktop/R/stafftrack/stafftrack1')
shiny::runApp('Desktop/R/fenton2013/liveGrowthChart5')
shiny::runApp('Desktop/R/fenton2013/liveGrowthChart5')
shiny::runApp('Desktop/R/fenton2013/growthDashboard2')
shiny::runApp('Desktop/R/fenton2013/growthDashboard2')
shiny::runApp('Desktop/R/fenton2013/growthDashboard2')
shiny::runApp('Desktop/R/fenton2013/liveGrowthChart5')
shiny::runApp('Desktop/R/fenton2013/liveGrowthChart5')
shiny::runApp('Desktop/R/fenton2013/liveGrowthChart5')
shiny::runApp('Desktop/R/fenton2013/liveGrowthChart5')
shiny::runApp('Desktop/R/fenton2013/liveGrowthChart5')
shiny::runApp('Desktop/R/fenton2013/liveGrowthChart5')
shiny::runApp('Desktop/R/fenton2013/liveGrowthChart5')
shiny::runApp('Desktop/R/fenton2013/liveGrowthChart5')
shiny::runApp('Desktop/R/stafftrack/stafftrack3')
?order
?sort
shiny::runApp('Desktop/R/stafftrack/stafftrack3')
shiny::runApp('Desktop/R/stafftrack/stafftrack3')
shiny::runApp('Desktop/R/fenton2013/liveGrowthChart5')
shiny::runApp('Desktop/R/fenton2013/growthDashboard2')
setwd("~/datasciencecoursera/05_Reproducible_Research/RepData_PeerAssessment1")
data <- read.csv(activity.csv)
data <- read.csv("activity.csv")
View(data)
View(data)
hist(data$steps)
library(data.table)
dt <- data.table(data,key="date")
View(dt)
dt[,lappy(sum),by="date"]
dt[,lapply(sum),by="date"]
?lapply
dt[,lapply(.SD, sum),by="date"]
str(dt[,lapply(.SD, sum),by="date"])
bydate <- dt[,lapply(.SD, sum),by="date"]
hist(bydate$steps)
View(bydate)
summarize(bydate$steps)
summary(bydate$steps)
?data.table
?aggregate
aggregate(data, by date, sum)
aggregate(data, by "date", sum)
aggregate(data, date, sum)
aggregate(data, by c(date), sum)
aggregate(data, by c(data$date), sum)
aggregate(data, by = list(date), FYB = "sum")
aggregate(data, by = list(date), FUN = "sum")
aggregate(x = data, by = list(date), FUN = "sum")
x <- data[, !is.na(data$steps)]
x <- data[ !is.na(data$steps), ]
View(x)
aggregate(x = x, by = list(date), FUN = "sum")
aggregate(x = x, by = list(x$date), FUN = "sum")
aggregate(x = x$steps, by = list(x$date), FUN = "sum")
aggregate(x$steps, by = list(x$date), FUN = "sum")
aggregate( steps = x$steps, by = list(x$date), FUN = "sum")
aggregate( x$steps, by = list(x$date), FUN = "sum")
x2 <- aggregate( x$steps, by = list(x$date), FUN = "sum")
x2 <- aggregate( x$steps, by = list(date), FUN = "sum")
x2 <- aggregate( x$steps, by = list(x$date), FUN = "sum")
str(x2)
hist(x2$x)
summary(x2$x)
x <- data[, !is.na(data$steps)]
x2 <- aggregate( x$steps, by = list(x$date), FUN = "sum")
?ddply
ddply(
)
library(plyr)
ddply()
ddply(data, .dates, sum)
ddply(data, dates, sum)
ddply(data, .(dates), sum)
View(data)
ddply(data, .(date), sum)
str(data)
ddply(data, data$date, sum)
ddply(data, date, sum)
ddply(data, .date, sum)
ddply(data, (date), sum)
ddply(data, ("date"), sum)
ddply(data, .(date), sum)
?aggregate
aggregate( data$steps, by = list(data$date), FUN = "sum")
str(aggregate( data$steps, by = list(data$date), FUN = "sum"))
names((aggregate( data$steps, by = list(data$date), FUN = "sum"))
)
names(aggregate( data$steps, by = list(data$date), FUN = "sum")
)
names(aggregate( data$steps, by = list(data$date), FUN = "sum"))
x <- aggregate( data$steps, by = list(data$date), FUN = "sum")
names(x)
x
View(data)
names(x) = c( "date", "steps")
x
hist(x$steps)
summary(x$steps)
summary(x$steps)
str(summary(x$steps))
names(summary(x$steps))
summary(x$steps)$Mean
x <- summary(x$steps)
names(x)
x$Mean
str(x)
x[1]
str(x[1])
x[Mean]
x["Mean"]
x["Mean"]+1
x$Mean
summary(x$steps)[Mean]
summary(x$steps)["Mean"]
x <- aggregate( data$steps, by = list(data$interval), FUN = "sum")\
x <- aggregate( data$steps, by = list(data$interval), FUN = "sum")
View(x)
dataNoNA <- data$[ !is.na(data$steps), ]
dataNoNA <- data[ !is.na(data$steps), ]
x <- aggregate( dataNoNA$steps, by = list(dataNoNA$interval), FUN = "sum")
x
names(x) <- c("interval","steps")
x
hist(x$steps)
hist(x$interval)
?plot
plot(x$interval, x$steps)
plot(x$interval, x$steps, type = "l")
